version: '3.8'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend

  postgres:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: trading
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5


  data-ingestion-service:
    build: ./data-ingestion-service
    depends_on:
      - kafka
    networks:
      - backend
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  real-time-processing-service:
    build: ./real-time-processing-service
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - backend
    environment:
      POSTGRES_HOST: postgres
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    command:
      - "java"
      - "--add-exports=java.base/sun.nio.ch=ALL-UNNAMED"
      - "--add-opens=java.base/java.nio=ALL-UNNAMED"
      - "-jar"
      - "app.jar"

  data-storage-service:
    build: ./data-storage-service
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8081:8081"
    networks:
      - backend
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/trading
      QUARKUS_DATASOURCE_USERNAME: postgres
      QUARKUS_DATASOURCE_PASSWORD: postgres
      QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION: drop-and-create

  data-analysis-service:
    build: ./data-analysis-service
    depends_on:
      - data-storage-service
    ports:
      - "8082:8082"
    networks:
      - backend

  data-visualization-service:
    build: ./data-visualization-service
    ports:
      - "3000:80"
    depends_on:
      - data-analysis-service
    networks:
      - backend

volumes:
  pgdata:

networks:
  backend:
